(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))i(o);new MutationObserver(o=>{for(const r of o)if(r.type==="childList")for(const l of r.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function t(o){const r={};return o.integrity&&(r.integrity=o.integrity),o.referrerpolicy&&(r.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?r.credentials="include":o.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(o){if(o.ep)return;o.ep=!0;const r=t(o);fetch(o.href,r)}})();const f={f:()=>{},renderer:null},P=()=>{const e=document.createElementNS("http://www.w3.org/2000/svg","polyline");return e.setAttribute("stroke-width",2),e.setAttribute("stroke","#000"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-linejoin","round"),e.setAttribute("fill","transparent"),e},b=()=>{const e=document.createElementNS("http://www.w3.org/2000/svg","polygon");return e.setAttribute("stroke-width",0),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-linejoin","round"),e.setAttribute("fill","#000"),e},w=()=>({origin:{x:0,y:0},move:{x:5,y:0},points:[{x:0,y:0}],bounds:{mx:0,my:0,Mx:0,My:0}}),A=()=>({centers:[{x:0,y:0}],bounds:{mx:0,my:0,Mx:0,My:0},polys:[]}),s=(e,n)=>{const t=e.x*Math.cos(n)-e.y*Math.sin(n),i=e.x*Math.sin(n)+e.y*Math.cos(n);e.x=t,e.y=i},h=e=>{e.points.push({x:e.origin.x+e.move.x,y:e.origin.y+e.move.y}),e.origin.x+=e.move.x,e.origin.y+=e.move.y,e.bounds.mx=Math.min(e.bounds.mx,e.origin.x),e.bounds.my=Math.min(e.bounds.my,e.origin.y),e.bounds.Mx=Math.max(e.bounds.Mx,e.origin.x),e.bounds.My=Math.max(e.bounds.My,e.origin.y)},g=(e,n)=>{const t=[];e.centers.forEach(i=>{const o={x:0,y:-e.rad*(1-e.ratio)*Math.pow(e.ratio,n-1)};for(let r=0;r<e.sides;r++)t.push({x:i.x+o.x,y:i.y+o.y}),s(o,e.angle)}),e.centers=t},C=(e,n)=>{const t=[];e.centers.forEach(i=>{const o={x:0,y:-e.rad*Math.sqrt(e.sq)*(1-e.ratio)*Math.pow(e.ratio,n-1)};s(o,e.angle/2);for(let r=0;r<e.sides;r++)t.push({x:i.x+o.x,y:i.y+o.y}),s(o,e.angle)}),e.centers=t},k={linear:["Dragon Curve","Levy Curve","Gosper Curve","Koch Snowflake","Square Wave","Hilbert Curve"],fill:["pent","trig","hex"]},E={dragonCurve:(e,n)=>({transform:{I:"f",f:"fph",h:"fnh"},rules:{f:t=>t?e.f(t-1,"f"):h(n),h:t=>t?e.f(t-1,"h"):h(n),p:t=>s(n.move,-Math.PI/2),n:t=>s(n.move,Math.PI/2)}}),levyCurve:(e,n)=>({transform:{I:"f",f:"pfnnfp"},rules:{f:t=>t?e.f(t-1,"f"):h(n),p:t=>s(n.move,-Math.PI/4),n:t=>s(n.move,Math.PI/4)}}),gosperCurve:(e,n)=>({transform:{I:"f",f:"fnhnnhpfppffphn",h:"pfnhhnnhnfppfph"},rules:{f:t=>t?e.f(t-1,"f"):h(n),h:t=>t?e.f(t-1,"h"):h(n),p:t=>s(n.move,-Math.PI/3),n:t=>s(n.move,+Math.PI/3)}}),kochSnowflake:(e,n)=>({transform:{I:"fnnfnnfnn",f:"fpfnnfpf"},rules:{f:t=>t?e.f(t-1,"f"):h(n),p:t=>s(n.move,-Math.PI/3),n:t=>s(n.move,Math.PI/3)}}),squareWave:(e,n)=>({transform:{I:"fnfnfnfn",f:"fpfnfnffpfpfnf"},rules:{f:t=>t?e.f(t-1,"f"):h(n),p:t=>s(n.move,-Math.PI/2),n:t=>s(n.move,Math.PI/2)}}),hilbertCurve:(e,n)=>({transform:{I:"f",f:"phmnfmfnmhp",h:"nfmphmhpmfn"},rules:{f:t=>t?e.f(t-1,"f"):null,h:t=>t?e.f(t-1,"h"):null,m:t=>h(n),p:t=>s(n.move,-Math.PI/2),n:t=>s(n.move,Math.PI/2)}}),pent:(e,n)=>(n.ratio=(1+2*Math.cos(Math.PI/5))/(2*(1+3*Math.cos(Math.PI/5))),n.angle=Math.PI/2.5,n.sides=5,n.rad=840,n.sq=1,{transform:{I:"I"},rules:{I:t=>t?(g(n,t),e.f(t-1,"I")):null}}),trig:(e,n)=>(n.ratio=1/2,n.angle=Math.PI/1.5,n.sides=3,n.rad=920,n.sq=1,{transform:{I:"I"},rules:{I:t=>t?(g(n,t),e.f(t-1,"I")):null}}),hex:(e,n)=>(n.ratio=1/3,n.angle=Math.PI/3,n.sides=6,n.rad=800,n.sq=.75,{transform:{I:"I"},rules:{I:t=>t?(C(n,t),e.f(t-1,"I")):null}})},L=(e,n,t)=>{const i=P(),o={x:800-(e.bounds.mx+e.bounds.Mx)/2,y:800-(e.bounds.my+e.bounds.My)/2};if(n.appendChild(i),t){i.setAttribute("points","");let r=0;const l=e.points.length;f.renderer=setInterval(()=>{r===l?clearInterval(f.renderer):(i.setAttribute("points",`${i.getAttribute("points")} ${e.points[r].x+o.x},${e.points[r].y+o.y}`),r++)},20)}else i.setAttribute("points",e.points.map(r=>`${r.x+o.x},${r.y+o.y}`).join(" "))},B=(e,n,t,i)=>{const o=Math.pow(e.ratio,n),r={x:0,y:-e.rad*o},l=[];e.centers.forEach(c=>{const u=[];for(let m=0;m<e.sides;m++){const a=c.x+r.x,x=c.y+r.y;e.bounds.mx=Math.min(e.bounds.mx,a),e.bounds.my=Math.min(e.bounds.my,x),e.bounds.Mx=Math.max(e.bounds.Mx,a),e.bounds.My=Math.max(e.bounds.My,x),u.push({x:a,y:x}),s(r,e.angle)}l.push(u)});const d={x:800-(e.bounds.mx+e.bounds.Mx)/2,y:800-(e.bounds.my+e.bounds.My)/2};if(i){let c=0;const u=l.length;f.renderer=setInterval(()=>{if(c===u)clearInterval(f.renderer);else{const m=b();m.setAttribute("points",l[c].map(a=>`${a.x+d.x},${a.y+d.y}`).join(" ")),t.appendChild(m),c++}},20)}else l.forEach(c=>{const u=b();u.setAttribute("points",c.map(m=>`${m.x+d.x},${m.y+d.y}`).join(" ")),t.appendChild(u)})},y=document.getElementById("fractalName"),I=document.getElementById("fractalDepth"),$=document.getElementById("animate"),p=document.getElementById("alert-box"),T=document.getElementById("reset"),q=document.getElementById("render"),M=document.getElementById("svg-box");for(const[e,n]of Object.entries(k))for(const t of n){const i=t.split(" ");i[0]=i[0].toLowerCase();const o=document.createElement("option");o.setAttribute("value",`${e}-${i.join("")}`),o.innerText=t,y.appendChild(o)}const S={linear:(e,n,t,i)=>{const o=w(),{transform:r,rules:l}=E[t](f,o);f.f=(d,c)=>[...r[c]].forEach(u=>l[u](d)),f.f(e,"I"),L(o,n,i)},fill:(e,n,t,i)=>{const o=A(),{transform:r,rules:l}=E[t](f,o);f.f=(d,c)=>[...r[c]].forEach(u=>l[u](d)),f.f(e,"I"),B(o,e,n,i)}};y.addEventListener("change",()=>{p.innerText=""});I.addEventListener("change",()=>{p.innerText=""});T.addEventListener("click",()=>{M.innerHTML="",y.value=0,I.value=0,p.innerText="",f.renderer&&clearInterval(f.renderer)});q.addEventListener("click",e=>{M.innerHTML="",f.renderer&&clearInterval(f.renderer);const n=y.value,t=parseInt(I.value);if(n===""){p.innerText="Select a valid fractal Type.";return}if(t<0){p.innerText="Enter valid depth";return}const i=n.split("-");S[i[0]](t,M,i[1],$.checked)});
